{"version":3,"sources":["store.tsx","Settings.tsx","util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","settings","treshold","sentence","settingsSlice","createSlice","name","reducers","update","state","action","payload","sentenceSlice","addWord","slice","store","configureStore","reducer","getState","dispatch","valuetext","value","SettingsDialog","props","open","handleClose","useSelector","useDispatch","Dialog","fullWidth","maxWidth","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","gutterBottom","Slider","getAriaValueText","valueLabelDisplay","step","marks","min","max","onChange","event","actions","DialogActions","Button","autoFocus","onClick","color","model","keypoints","sequence","predictions","words","zeros","Array","fill","extractKeypoints","landmarks","reduce","accumulator","currentValue","concat","x","y","z","loadModel","a","tf","loadActions","fetch","response","text","data","split","loadVideoFeed","el","hands","Hands","locateFile","file","setOptions","maxNumHands","minDetectionConfidence","minTrackingConfidence","onResults","initialize","Camera","onFrame","send","image","start","results","multiHandLandmarks","multiHandedness","lh","rh","index","length","isRightHand","label","push","extractSequence","prediction","tensor","res","predict","dataSync","Math","argmax","indexOf","console","log","makePrediction","isNew","isStable","arr","sort","b","filter","v","pop","speechSynthesis","speak","SpeechSynthesisUtterance","App","webcamRef","useRef","React","useState","settingsOpen","setSettingsOpen","loading","setLoading","useEffect","current","video","init","className","AppBar","position","Toolbar","variant","IconButton","edge","ref","style","display","CircularProgress","map","c","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da49f33f.chunk.js","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface SettingsState {\n  treshold: number\n}\n\nconst initialState: { settings: SettingsState, sentence: string[] } = {\n  settings: {\n    treshold: 85,\n  },\n  sentence: []\n}\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState: initialState.settings,\n  reducers: {\n  update: (state, action: PayloadAction<number>) => {\n    state.treshold = action.payload\n  },\n  },\n})\n\nexport const sentenceSlice = createSlice({\n  name: 'sentence',\n  initialState:initialState.sentence,\n  reducers: {\n    addWord: (state, action: PayloadAction<string>) => {\n      return [...state.slice(-4), action.payload]\n    },\n  },\n})\n\n\nexport default settingsSlice.reducer\nexport const store = configureStore({\n  reducer: { settings: settingsSlice.reducer, sentence: sentenceSlice.reducer },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport const getState = store.getState;\nexport const dispatch = store.dispatch;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\nimport { Typography, Slider } from '@material-ui/core';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState, AppDispatch, settingsSlice } from './store';\n\nfunction valuetext(value: number) {\n    return `${value}%`;\n}\n\nexport default function SettingsDialog(props: { open: boolean, handleClose: () => void }) {\n    const { open, handleClose } = props;\n    const settings = useSelector((state: RootState) => state.settings)\n    const dispatch: AppDispatch = useDispatch()\n\n    return (\n        <div>\n            <Dialog\n                fullWidth={true}\n                maxWidth=\"sm\"\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"settings-dialog-title\"\n            >\n                <DialogTitle id=\"settings-dialog-title\">\n                    Settings\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Typography id=\"treshold-slider\" gutterBottom>\n                            Accuracy treshold\n                        </Typography>\n                        <Slider\n                            value={settings.treshold}\n                            getAriaValueText={valuetext}\n                            aria-labelledby=\"treshold-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={5}\n                            marks\n                            min={50}\n                            max={99}\n                            onChange={(event, value) => dispatch(settingsSlice.actions.update(value as number))}\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import { Camera } from \"@mediapipe/camera_utils\";\nimport { Hands, NormalizedLandmarkList, Results } from \"@mediapipe/hands\";\nimport * as tf from '@tensorflow/tfjs'\nimport { dispatch, getState, sentenceSlice } from \"./store\";\n\nvar model: tf.LayersModel;\n\nvar actions: string[] = [];\nvar keypoints = [];\nvar sequence: number[][] = [];\n\nvar predictions: string[] = [];\nvar words: string[] = [];\n\nconst zeros = new Array(63).fill(0);\nexport const extractKeypoints = (landmarks: NormalizedLandmarkList) => {\n  return landmarks.reduce(\n    function (accumulator, currentValue) {\n      return accumulator.concat([currentValue.x, currentValue.y, currentValue.z])\n    },\n    [] as number[]\n  )\n}\nexport function mode(arr: any[]) {\n  return arr.sort((a, b) =>\n    arr.filter(v => v === a).length\n    - arr.filter(v => v === b).length\n  ).pop();\n}\n\nfunction extractSequence(results: Results) {\n\n    if (results.multiHandLandmarks && results.multiHandedness) {\n      var lh = zeros;\n      var rh = zeros;\n  \n      for (let index = 0; index < results.multiHandLandmarks.length; index++) {\n        const classification = results.multiHandedness[index];\n        const isRightHand = classification.label === 'Right';\n        const landmarks = results.multiHandLandmarks[index];\n  \n        if (isRightHand) {\n          rh = extractKeypoints(landmarks)\n        }\n        else {\n          lh = extractKeypoints(landmarks)\n        }\n      }\n  \n      keypoints = [...lh, ...rh]\n      sequence.push(keypoints)\n    }\n  \n  }\n  \n  export async function loadModel() {\n    const modelURL = 'model/model.json';\n    model = await tf.loadLayersModel(modelURL);\n  }\n  \n  export async function loadActions() {\n    const response = await fetch(\"/model.csv\");\n    const data = await response.text();\n    actions = data.split(\",\");\n  }\n  \n  export async function loadVideoFeed(el: HTMLVideoElement){\n    const hands = new Hands({\n        locateFile: (file) => {\n          return `/hands/${file}`;\n        }\n      });\n      hands.setOptions({\n        maxNumHands: 2,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      });\n      hands.onResults(onResults);\n      await hands.initialize()\n      if (el) {\n        new Camera(el, {\n          onFrame: async () => {\n            await hands.send({ image: el });\n          },\n        }).start()\n      }\n  \n  }\nconst makePrediction = (sequence: number[][]) => {\n    let tensor: tf.Tensor3D = tf.tensor([sequence]);\n    let outputTensor = model.predict(tensor)\n    let res = (outputTensor as tf.Tensor3D).dataSync()\n    let max = Math.max(...res)\n    let argmax = [...res].indexOf(max);\n  \n    const treshold = getState().settings.treshold/100\n    if (max >= treshold) {\n      console.log(actions[argmax], max);\n      return actions[argmax]\n    }\n    return null;\n  \n  }\n\n  function onResults(results: Results) {\n    extractSequence(results)\n    if (sequence.length === 2) {\n      const prediction = makePrediction(sequence);\n      const isNew = prediction !== words[words.length - 1];\n      const isStable = predictions.length > 4 && prediction === mode(predictions);\n\n      prediction && predictions.push(prediction);\n\n      if (prediction && isNew && isStable) {\n        words.push(prediction);\n        dispatch(sentenceSlice.actions.addWord(prediction))\n        speechSynthesis.speak(new SpeechSynthesisUtterance(prediction));\n        predictions = [];\n      }\n      sequence = []\n    }\n\n  }\n\n","import React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux'\nimport './App.css';\nimport Webcam from 'react-webcam';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SettingsDialog from './Settings';\nimport { RootState } from './store';\nimport { loadActions, loadModel, loadVideoFeed } from './util';\nimport { CircularProgress } from '@material-ui/core';\n\nfunction App() {\n  const webcamRef: React.Ref<Webcam> = useRef(null);\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const settings = useSelector((state: RootState) => state.settings)\n  const sentence = useSelector((state: RootState) => state.sentence)\n\n  const handleClickOpenSettings = () => {\n    setSettingsOpen(true);\n  };\n\n  const handleCloseSettings = () => {\n    setSettingsOpen(false);\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      await loadActions()\n      await loadModel();\n      if (webcamRef.current?.video) await loadVideoFeed(webcamRef.current?.video)\n      setLoading(false)\n    }\n    init()\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar className=\"appbar-toolbar\">\n          <Typography variant=\"h6\" className=\"appbar-toolbar--title\">\n            IHearU\n          </Typography>\n          <IconButton edge=\"end\" aria-label=\"settings\" aria-haspopup=\"true\" color=\"inherit\" onClick={handleClickOpenSettings}>\n            <SettingsIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      {!loading && <div className=\"stats\">Treshold: {settings.treshold}%</div>}\n      <Webcam\n        ref={webcamRef}\n        style={{\n          display: loading ? \"none\" : \"block\"\n        }}\n      />\n      <SettingsDialog open={settingsOpen} handleClose={handleCloseSettings} />\n      {loading && <div className=\"loading-scrim\">\n        <h3>Loading detection models</h3>\n        <CircularProgress /></div>\n      }\n      <h3>\n        {sentence.map((c, i) =>\n          <span key={`${c}-${i}`}>{c} </span>\n        )}\n      </h3>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { store } from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}