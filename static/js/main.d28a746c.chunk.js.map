{"version":3,"sources":["store.tsx","Settings.tsx","util.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["initialState","settings","threshold","showStats","sentence","predictions","words","log","settingsSlice","createSlice","name","reducers","setThreshold","state","action","payload","setShowStats","sentenceSlice","addPrediction","push","addWord","logWords","unshift","store","configureStore","reducer","getState","dispatch","valuetext","value","SettingsDialog","props","open","handleClose","useSelector","useDispatch","Dialog","fullWidth","maxWidth","onClose","DialogTitle","id","DialogContent","DialogContentText","FormGroup","FormControlLabel","control","Slider","getAriaValueText","valueLabelDisplay","step","marks","min","max","onChange","event","actions","label","labelPlacement","Switch","checked","target","color","DialogActions","Button","autoFocus","onClick","model","keypoints","sequence","zeros","Array","fill","extractKeypoints","landmarks","reduce","accumulator","currentValue","concat","x","y","z","loadModel","a","tf","loadActions","fetch","response","text","data","split","loadVideoFeed","el","hands","Hands","locateFile","file","setOptions","maxNumHands","minDetectionConfidence","minTrackingConfidence","onResults","initialize","Camera","onFrame","send","image","start","results","multiHandLandmarks","multiHandedness","lh","rh","index","length","isRightHand","extractSequence","prediction","tensor","res","predict","dataSync","Math","argmax","indexOf","console","makePrediction","isNew","isStable","arr","sort","b","filter","v","pop","url","googleTTS","join","lang","slow","host","then","base64","audioObj","Audio","oncanplaythrough","e","play","catch","error","getCounts","counts","word","App","webcamRef","useRef","React","useState","settingsOpen","setSettingsOpen","loading","setLoading","useEffect","current","video","init","className","AppBar","position","Toolbar","Typography","variant","IconButton","edge","Object","keys","map","ref","style","display","CircularProgress","c","i","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d28a746c.chunk.js","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface SettingsState {\n  threshold: number,\n  showStats: boolean\n}\n\nconst initialState: { settings: SettingsState, sentence: { predictions: string[], words: string[], log: string[][]} } = {\n  settings: {\n    threshold: 85,\n    showStats: false\n  },\n  sentence: {predictions: [], words:[], log: []},\n  \n}\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState: initialState.settings,\n  reducers: {\n  setThreshold: (state, action: PayloadAction<number>) => {\n    state.threshold = action.payload\n  },\n  setShowStats: (state, action: PayloadAction<boolean>) => {\n    state.showStats = action.payload\n  },\n  },\n})\n\nexport const sentenceSlice = createSlice({\n  name: 'sentence',\n  initialState:initialState.sentence,\n  reducers: {\n    addPrediction: (state, action: PayloadAction<string>) => {\n      state.predictions.push(action.payload);\n    },\n    addWord: (state, action: PayloadAction<string>) => {\n      state.predictions = [];\n      state.words.push(action.payload);\n    },\n    logWords: (state) => {\n      state.log.unshift(state.words);\n      state.words = [];\n    },\n  },\n})\n\n\nexport default settingsSlice.reducer\nexport const store = configureStore({\n  reducer: { settings: settingsSlice.reducer, sentence: sentenceSlice.reducer },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport const getState = store.getState;\nexport const dispatch = store.dispatch;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState, AppDispatch, settingsSlice } from './store';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nfunction valuetext(value: number) {\n    return `${value}%`;\n}\n\nexport default function SettingsDialog(props: { open: boolean, handleClose: () => void }) {\n    const { open, handleClose } = props;\n    const settings = useSelector((state: RootState) => state.settings)\n    const dispatch: AppDispatch = useDispatch()\n\n    return (\n        <div>\n            <Dialog\n                fullWidth={true}\n                maxWidth=\"sm\"\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"settings-dialog-title\"\n            >\n                <DialogTitle id=\"settings-dialog-title\">\n                    Settings\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <FormGroup>\n                            <FormControlLabel \n                                control={\n                                    <Slider\n                                        value={settings.threshold}\n                                        getAriaValueText={valuetext}\n                                        aria-labelledby=\"threshold-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        step={5}\n                                        marks\n                                        min={50}\n                                        max={99}\n                                        onChange={(event, value) => dispatch(settingsSlice.actions.setThreshold(value as number))}\n                                    />\n                                }\n                                label=\"Accuracy threshold\"\n                                labelPlacement=\"top\"\n                            />\n\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={settings.showStats}\n                                        onChange={event => dispatch(settingsSlice.actions.setShowStats(event.target.checked))}\n                                        name=\"showStats\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Show Stats\"\n                            />\n                        </FormGroup>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import { Camera } from \"@mediapipe/camera_utils\";\nimport { Hands, NormalizedLandmarkList, Results } from \"@mediapipe/hands\";\nimport * as tf from '@tensorflow/tfjs'\nimport { dispatch, getState, sentenceSlice } from \"./store\";\nimport * as googleTTS from 'google-tts-api';\n\nvar model: tf.LayersModel;\n\nvar actions: string[] = [];\nvar keypoints = [];\nvar sequence: number[][] = [];\n\nvar predictions: string[] = [];\nvar words: string[] = [];\n\nconst zeros = new Array(63).fill(0);\nexport const extractKeypoints = (landmarks: NormalizedLandmarkList) => {\n  return landmarks.reduce(\n    function (accumulator, currentValue) {\n      return accumulator.concat([currentValue.x, currentValue.y, currentValue.z])\n    },\n    [] as number[]\n  )\n}\nexport function mode(arr: any[]) {\n  return arr.sort((a, b) =>\n    arr.filter(v => v === a).length\n    - arr.filter(v => v === b).length\n  ).pop();\n}\n\nfunction extractSequence(results: Results) {\n\n  if (results.multiHandLandmarks && results.multiHandedness) {\n    var lh = zeros;\n    var rh = zeros;\n\n    for (let index = 0; index < results.multiHandLandmarks.length; index++) {\n      const classification = results.multiHandedness[index];\n      const isRightHand = classification.label === 'Right';\n      const landmarks = results.multiHandLandmarks[index];\n\n      if (isRightHand) {\n        rh = extractKeypoints(landmarks)\n      }\n      else {\n        lh = extractKeypoints(landmarks)\n      }\n    }\n\n    keypoints = [...lh, ...rh]\n    sequence.push(keypoints)\n  }\n\n}\n\nexport async function loadModel() {\n  const modelURL = 'model/model.json';\n  model = await tf.loadLayersModel(modelURL);\n}\n\nexport async function loadActions() {\n  const response = await fetch(\"/model.csv\");\n  const data = await response.text();\n  actions = data.split(\",\");\n}\n\nexport async function loadVideoFeed(el: HTMLVideoElement) {\n  const hands = new Hands({\n    locateFile: (file) => {\n      return `/hands/${file}`;\n    }\n  });\n  hands.setOptions({\n    maxNumHands: 2,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  hands.onResults(onResults);\n  await hands.initialize()\n  if (el) {\n    new Camera(el, {\n      onFrame: async () => {\n        await hands.send({ image: el });\n      },\n    }).start()\n  }\n\n}\nconst makePrediction = (sequence: number[][]) => {\n  let tensor: tf.Tensor3D = tf.tensor([sequence]);\n  let outputTensor = model.predict(tensor)\n  let res = (outputTensor as tf.Tensor3D).dataSync()\n  let max = Math.max(...res)\n  let argmax = [...res].indexOf(max);\n\n  const threshold = getState().settings.threshold / 100\n  if (max >= threshold) {\n    console.log(actions[argmax], max);\n    return actions[argmax]\n  }\n  return null;\n\n}\n\nfunction onResults(results: Results) {\n  extractSequence(results)\n  if (sequence.length === 2) {\n    const prediction = makePrediction(sequence);\n    const isNew = prediction !== words[words.length - 1];\n    const isStable = predictions.length > 4 && prediction === mode(predictions);\n\n    if (prediction) {\n      predictions.push(prediction);\n      dispatch(sentenceSlice.actions.addPrediction(prediction))\n    }\n\n    if (prediction && isNew && isStable) {\n      words.push(prediction);\n      predictions = [];\n      dispatch(sentenceSlice.actions.addWord(prediction));\n\n      // speechSynthesis.speak(new SpeechSynthesisUtterance(prediction));\n    }\n    sequence = []\n  }\n\n}\n\nexport function logWords() {\n  const words = getState().sentence.words;\n  // speechSynthesis.speak(new SpeechSynthesisUtterance(words.join(\" \")));\n  const url = googleTTS.getAudioUrl(words.join(\" \"), {\n    lang: 'ar',\n    slow: false,\n    host: 'https://translate.google.com',\n  });\n  console.log(url);\n  googleTTS.getAudioBase64(words.join(\" \"), { lang: 'ar', slow: false })\n    .then((base64) => {\n      console.log({ base64 });\n      let audioObj = new Audio(`data:audio/mp3;base64,${base64}`);\n      audioObj.oncanplaythrough = e => audioObj.play()\n    })\n    .catch(console.error);\n  dispatch(sentenceSlice.actions.logWords());\n}\n\nexport function getCounts(arr: string[]) {\n  let countedWords = arr.reduce(function (counts, word) {\n    if (word in counts) {\n      counts[word]++\n    }\n    else {\n      counts[word] = 1\n    }\n    return counts\n  }, {} as { [key: string]: number })\n  return countedWords;\n}\n\n","import React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux'\nimport './App.css';\nimport Webcam from 'react-webcam';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SettingsDialog from './Settings';\nimport { RootState } from './store';\nimport { getCounts, loadActions, loadModel, loadVideoFeed, logWords } from './util';\nimport { CircularProgress } from '@material-ui/core';\nimport RecordVoiceOverIcon from '@material-ui/icons/RecordVoiceOver';\n\nfunction App() {\n  const webcamRef: React.Ref<Webcam> = useRef(null);\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const settings = useSelector((state: RootState) => state.settings)\n  const sentence = useSelector((state: RootState) => state.sentence)\n\n  const handleClickOpenSettings = () => {\n    setSettingsOpen(true);\n  };\n\n  const handleCloseSettings = () => {\n    setSettingsOpen(false);\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      await loadActions()\n      await loadModel();\n      if (webcamRef.current?.video) await loadVideoFeed(webcamRef.current?.video)\n      setLoading(false)\n    }\n    init()\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar className=\"appbar-toolbar\">\n          <Typography variant=\"h6\" className=\"appbar-toolbar--title\">\n            IHearU\n          </Typography>\n          <IconButton edge=\"end\" aria-label=\"settings\" aria-haspopup=\"true\" color=\"inherit\" onClick={handleClickOpenSettings}>\n            <SettingsIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      {(!loading && settings.showStats) && <div className=\"stats\">\n        {/* <div>Threshold: {settings.threshold}%</div> */}\n        <div>\n          {Object.keys(getCounts(sentence.predictions)).map(word =>\n           <span key={word}>{word}: {getCounts(sentence.predictions)[word]} </span>)}\n        </div>\n      </div>}\n      <Webcam\n        ref={webcamRef}\n        style={{\n          display: loading ? \"none\" : \"block\"\n        }}\n      />\n      <SettingsDialog open={settingsOpen} handleClose={handleCloseSettings} />\n      {loading && <div className=\"loading-scrim\">\n        <h3>Loading detection models</h3>\n        <CircularProgress /></div>\n      }\n      <h3>\n        {sentence.words.map((c, i) =>\n          <span key={`${c}-${i}`}>{c} </span>\n        )}\n        <IconButton edge=\"end\" aria-label=\"settings\" aria-haspopup=\"true\" color=\"primary\" onClick={logWords} disabled={sentence.words.length === 0}>\n          <RecordVoiceOverIcon />\n        </IconButton>\n      </h3>\n\n      <h3>\n        {sentence.log.map((words, i) =>\n          <p key={`${words}-${i}`}>{words.join(\" \")} </p>\n        )}\n      </h3>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport { store } from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}