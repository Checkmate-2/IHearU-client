{"version":3,"sources":["store.tsx","Settings.tsx","util.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["initialState","settings","threshold","showStats","speakAlong","sentence","predictions","words","log","settingsSlice","createSlice","name","reducers","setThreshold","state","action","payload","setShowStats","setSpeakAlong","sentenceSlice","addPrediction","push","addWord","logWords","unshift","store","configureStore","reducer","getState","dispatch","valuetext","value","SettingsDialog","props","open","handleClose","useSelector","useDispatch","fullWidth","maxWidth","onClose","id","control","getAriaValueText","valueLabelDisplay","step","marks","min","max","onChange","event","actions","label","labelPlacement","checked","target","color","autoFocus","onClick","model","franco","keypoints","sequence","zeros","Array","fill","extractKeypoints","landmarks","reduce","accumulator","currentValue","concat","x","y","z","loadModel","a","tf","loadActions","fetch","response","text","data","split","loadFranco","json","loadVideoFeed","el","hands","Hands","locateFile","file","setOptions","maxNumHands","minDetectionConfidence","minTrackingConfidence","onResults","initialize","Camera","onFrame","send","image","start","results","multiHandLandmarks","multiHandedness","lh","rh","index","length","isRightHand","extractSequence","prediction","tensor","res","predict","dataSync","Math","argmax","indexOf","console","makePrediction","isNew","isStable","arr","sort","b","filter","v","pop","speechSynthesis","speak","SpeechSynthesisUtterance","getCounts","counts","word","theme","createTheme","palette","primary","light","main","dark","contrastText","App","webcamRef","useRef","React","useState","settingsOpen","setSettingsOpen","loading","setLoading","useEffect","current","video","init","position","className","src","alt","variant","edge","Object","keys","map","ref","style","display","typing","join","disabled","i","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4qBAUMA,EAAkH,CACtHC,SAAU,CACRC,UAAW,GACXC,WAAW,EACXC,YAAY,GAEdC,SAAU,CAACC,YAAa,GAAIC,MAAM,GAAIC,IAAK,KAIhCC,EAAgBC,YAAY,CACvCC,KAAM,WACNX,aAAcA,EAAaC,SAC3BW,SAAU,CACVC,aAAc,SAACC,EAAOC,GACpBD,EAAMZ,UAAYa,EAAOC,SAE3BC,aAAc,SAACH,EAAOC,GACpBD,EAAMX,UAAYY,EAAOC,SAE3BE,cAAe,SAACJ,EAAOC,GACrBD,EAAMV,WAAaW,EAAOC,YAKjBG,EAAgBT,YAAY,CACvCC,KAAM,WACNX,aAAaA,EAAaK,SAC1BO,SAAU,CACRQ,cAAe,SAACN,EAAOC,GACrBD,EAAMR,YAAYe,KAAKN,EAAOC,UAEhCM,QAAS,SAACR,EAAOC,GACfD,EAAMR,YAAc,GACpBQ,EAAMP,MAAMc,KAAKN,EAAOC,UAE1BO,SAAU,SAACT,GACTA,EAAMN,IAAIgB,QAAQV,EAAMP,OACxBO,EAAMP,MAAQ,OAOPkB,GADEhB,EAAf,QACqBiB,YAAe,CAClCC,QAAS,CAAE1B,SAAUQ,EAAckB,QAAStB,SAAUc,EAAcQ,YAQzDC,EAAWH,EAAMG,SACjBC,EAAWJ,EAAMI,S,0BCpD9B,SAASC,EAAUC,GACf,MAAM,GAAN,OAAUA,EAAV,KAGW,SAASC,EAAeC,GACnC,IAAQC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACRlC,EAAWmC,aAAY,SAACtB,GAAD,OAAsBA,EAAMb,YACnD4B,EAAwBQ,cAE9B,OACI,8BACI,eAAC,IAAD,CACIC,WAAW,EACXC,SAAS,KACTL,KAAMA,EACNM,QAASL,EACT,kBAAgB,wBALpB,UAOI,cAAC,IAAD,CAAaM,GAAG,wBAAhB,sBAGA,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIC,QACI,cAAC,IAAD,CACIX,MAAO9B,EAASC,UAChByC,iBAAkBb,EAClB,kBAAgB,mBAChBc,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLC,IAAK,GACLC,IAAK,GACLC,SAAU,SAACC,EAAOnB,GAAR,OAAkBF,EAASpB,EAAc0C,QAAQtC,aAAakB,OAGhFqB,MAAM,qBACNC,eAAe,QAGnB,cAAC,IAAD,CACIX,QACI,cAAC,IAAD,CACIY,QAASrD,EAASE,UAClB8C,SAAU,SAAAC,GAAK,OAAIrB,EAASpB,EAAc0C,QAAQlC,aAAaiC,EAAMK,OAAOD,WAC5E3C,KAAK,YACL6C,MAAM,YAGdJ,MAAM,sBAiBtB,cAAC,IAAD,UACI,cAAC,IAAD,CAAQK,WAAS,EAACC,QAASvB,EAAaqB,MAAM,UAA9C,0B,IC9EhBG,GAGAC,G,uCADAT,GAAoB,GAGpBU,GAAY,GACZC,GAAuB,GAEvBxD,GAAwB,GACxBC,GAAkB,GAEhBwD,GAAQ,IAAIC,MAAM,IAAIC,KAAK,GACpBC,GAAmB,SAACC,GAC/B,OAAOA,EAAUC,QACf,SAAUC,EAAaC,GACrB,OAAOD,EAAYE,OAAO,CAACD,EAAaE,EAAGF,EAAaG,EAAGH,EAAaI,MAE1E,KAmCG,SAAeC,KAAtB,gC,8CAAO,sBAAAC,EAAA,4DACY,mBADZ,SAESC,KADG,oBADZ,OAELlB,GAFK,mD,sBAKA,SAAemB,KAAtB,gC,8CAAO,8BAAAF,EAAA,sEACkBG,MAAM,cADxB,cACCC,EADD,gBAEcA,EAASC,OAFvB,cAECC,EAFD,OAGL/B,GAAU+B,EAAKC,MAAM,KAHhB,SAICC,KAJD,4C,+BAOQA,K,8EAAf,4BAAAR,EAAA,sEACyBG,MAAM,gBAD/B,cACQC,EADR,gBAEiBA,EAASK,OAF1B,OAEEzB,GAFF,mD,sBAKO,SAAe0B,GAAtB,mC,8CAAO,WAA6BC,GAA7B,eAAAX,EAAA,6DACCY,EAAQ,IAAIC,SAAM,CACtBC,WAAY,SAACC,GACX,MAAM,UAAN,OAAiBA,OAGfC,WAAW,CACfC,YAAa,EACbC,uBAAwB,GACxBC,sBAAuB,KAEzBP,EAAMQ,UAAUA,IAXX,SAYCR,EAAMS,aAZP,OAaDV,GACF,IAAIW,UAAOX,EAAI,CACbY,QAAQ,WAAD,4BAAE,sBAAAvB,EAAA,sEACDY,EAAMY,KAAK,CAAEC,MAAOd,IADnB,2CAAF,kDAAC,KAGPe,QAlBA,4C,sBAsCP,SAASN,GAAUO,GAEjB,GAlFF,SAAyBA,GAEvB,GAAIA,EAAQC,oBAAsBD,EAAQE,gBAAiB,CAIzD,IAHA,IAAIC,EAAK3C,GACL4C,EAAK5C,GAEA6C,EAAQ,EAAGA,EAAQL,EAAQC,mBAAmBK,OAAQD,IAAS,CACtE,IACME,EAAuC,UADtBP,EAAQE,gBAAgBG,GACZxD,MAC7Be,EAAYoC,EAAQC,mBAAmBI,GAEzCE,EACFH,EAAKzC,GAAiBC,GAGtBuC,EAAKxC,GAAiBC,GAI1BN,GAAS,uBAAO6C,GAAP,aAAcC,IACvB7C,GAASzC,KAAKwC,KA6DhBkD,CAAgBR,GACQ,IAApBzC,GAAS+C,OAAc,CACzB,IAAMG,EAnBa,SAAClD,GACtB,IAAImD,EAAsBpC,KAAU,CAACf,IAEjCoD,EADevD,GAAMwD,QAAQF,GACOG,WACpCpE,EAAMqE,KAAKrE,IAAL,MAAAqE,KAAI,aAAQH,IAClBI,EAAS,aAAIJ,GAAKK,QAAQvE,GAG9B,OAAIA,GADcpB,IAAW3B,SAASC,UAAY,KAEhDsH,QAAQhH,IAAI2C,GAAQmE,GAAStE,GACtBG,GAAQmE,IAEV,KAOcG,CAAe3D,IAC5B4D,EAAQV,IAAezG,GAAMA,GAAMsG,OAAS,GAC5Cc,EAAWrH,GAAYuG,OAAS,GAAKG,KA5F1BY,EA4F8CtH,IA3FtDuH,MAAK,SAACjD,EAAGkD,GAAJ,OACdF,EAAIG,QAAO,SAAAC,GAAC,OAAIA,IAAMpD,KAAGiC,OACvBe,EAAIG,QAAO,SAAAC,GAAC,OAAIA,IAAMF,KAAGjB,UAC3BoB,MA0FIjB,IACF1G,GAAYe,KAAK2F,GACjBnF,EAASV,EAAcgC,QAAQ/B,cAAc4F,KAG3CA,GAAcU,GAASC,IACzBpH,GAAMc,KAAK2F,GACX1G,GAAc,GACduB,EAASV,EAAcgC,QAAQ7B,QAAQ0F,IAGvCkB,gBAAgBC,MAAM,IAAIC,yBAAyBxE,GAAOoD,MAE5DlD,GAAW,GA3GR,IAAc8D,EAgHd,SAASrG,KAIdM,EAASV,EAAcgC,QAAQ5B,YAC/BhB,GAAQ,GAGH,SAAS8H,GAAUT,GAUxB,OATmBA,EAAIxD,QAAO,SAAUkE,EAAQC,GAO9C,OANIA,KAAQD,EACVA,EAAOC,KAGPD,EAAOC,GAAQ,EAEVD,IACN,I,6ECxICE,GAAQC,uBAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAmFLC,OA9Ef,WACE,IAAMC,EAA+BC,iBAAO,MAC5C,EAAwCC,IAAMC,UAAS,GAAvD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8BH,IAAMC,UAAS,GAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACMvJ,EAAWmC,aAAY,SAACtB,GAAD,OAAsBA,EAAMb,YACnDI,EAAW+B,aAAY,SAACtB,GAAD,OAAsBA,EAAMT,YAqBzD,OAXAoJ,qBAAU,YACE,uCAAG,8BAAA7E,EAAA,sEACLE,KADK,uBAELH,KAFK,sBAGPsE,EAAUS,eAHH,aAGP,EAAmBC,OAHZ,gCAGyBrE,GAAa,UAAC2D,EAAUS,eAAX,aAAC,EAAmBC,OAH1D,OAIXH,GAAW,GAJA,2CAAH,qDAMVI,KACC,IAID,eAAC,iBAAD,CAAepB,MAAOA,GAAtB,UACE,cAAC,IAAD,CAAQqB,SAAS,QAAjB,SACE,eAAC,IAAD,CAASC,UAAU,iBAAnB,UACE,sBAAKA,UAAU,wBAAf,UACE,qBAAKC,IAAI,eAAeC,IAAI,SAC5B,cAAC,IAAD,CAAYC,QAAQ,KAApB,uBAEF,cAAC,IAAD,CAAYC,KAAK,MAAM,aAAW,WAAW,gBAAc,OAAO1G,MAAM,UAAUE,QA3B1D,WAC9B4F,GAAgB,IA0BV,SACE,cAAC,IAAD,WAIN,sBAAKQ,UAAU,WAAf,WACKP,GAAWtJ,EAASE,WAAc,qBAAK2J,UAAU,QAAf,SAEnC,8BACGK,OAAOC,KAAK/B,GAAUhI,EAASC,cAAc+J,KAAI,SAAA9B,GAAI,OACpD,iCAAkBA,EAAlB,KAA0BF,GAAUhI,EAASC,aAAaiI,GAA1D,MAAWA,UAGjB,cAAC,IAAD,CACE+B,IAAKrB,EACLsB,MAAO,CACLC,QAASjB,EAAU,OAAS,WAGhC,cAACvH,EAAD,CAAgBE,KAAMmH,EAAclH,YA1Cd,WAC1BmH,GAAgB,MA0CXC,GAAW,sBAAKO,UAAU,gBAAf,UACV,qBAAKC,IAAI,eAAeC,IAAI,cAAcF,UAAU,aACpD,0DACA,cAAC,KAAD,QAEAP,GAAW,sBAAKO,UAAU,iBAAf,UACX,sBAAKA,UAAU,uBAAf,UACE,cAAC,KAAD,CAAYW,OAAQ,EAApB,SAAwBpK,EAASE,MAAMmK,KAAK,OAC5C,cAAC,IAAD,CAAYR,KAAK,MAAM,aAAW,WAAW,gBAAc,OAAO1G,MAAM,UAAUE,QAASnC,GAAUoJ,SAAoC,IAA1BtK,EAASE,MAAMsG,OAA9H,SACE,cAAC,KAAD,SAIJ,qBAAKiD,UAAU,WAAf,SACGzJ,EAASG,IAAI6J,KAAI,SAAChK,EAAUuK,GAAX,OAChB,8BAA6BvK,EAASqK,KAAK,KAA3C,gBAAWrK,EAAX,YAAuBuK,mBCtF/BC,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9K,QACfwK,UAAUC,cAAcQ,YAI1BvE,QAAQhH,IACN,+GAKE6K,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBlE,QAAQhH,IAAI,sCAGR6K,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAACC,GACN3E,QAAQ2E,MAAM,4CAA6CA,MCjGjE,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAD,CAAUpL,MAAOA,EAAjB,SACE,cAAC,GAAD,MAEFqL,SAASC,eAAe,SFWnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM6B,GAAN,sBAEPpC,KAgEV,SAAiCO,EAAeC,GAE9CtG,MAAMqG,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAACzG,GAEL,IAAMsI,EAActI,EAASqI,QAAQE,IAAI,gBAEnB,MAApBvI,EAASwI,QACO,MAAfF,IAA8D,IAAvCA,EAAY/F,QAAQ,cAG5C+D,UAAUC,cAAckC,MAAMhC,MAAK,SAACC,GAClCA,EAAagC,aAAajC,MAAK,WAC7BV,OAAOC,SAAS2C,eAKpBxC,GAAgBC,EAAOC,MAG1Ba,OAAM,WACL1E,QAAQhH,IAAI,oEAtFVoN,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,MAAK,WACjCjE,QAAQhH,IACN,+GAMJ2K,GAAgBC,EAAOC,OEjC/BwC,GAKAzB,O","file":"static/js/main.581dd37e.chunk.js","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface SettingsState {\n  threshold: number,\n  showStats: boolean,\n  speakAlong: boolean\n}\n\nconst initialState: { settings: SettingsState, sentence: { predictions: string[], words: string[], log: string[][]} } = {\n  settings: {\n    threshold: 85,\n    showStats: false,\n    speakAlong: true,\n  },\n  sentence: {predictions: [], words:[], log: []},\n  \n}\n\nexport const settingsSlice = createSlice({\n  name: 'settings',\n  initialState: initialState.settings,\n  reducers: {\n  setThreshold: (state, action: PayloadAction<number>) => {\n    state.threshold = action.payload\n  },\n  setShowStats: (state, action: PayloadAction<boolean>) => {\n    state.showStats = action.payload\n  },\n  setSpeakAlong: (state, action: PayloadAction<boolean>) => {\n    state.speakAlong = action.payload\n  },\n  },\n})\n\nexport const sentenceSlice = createSlice({\n  name: 'sentence',\n  initialState:initialState.sentence,\n  reducers: {\n    addPrediction: (state, action: PayloadAction<string>) => {\n      state.predictions.push(action.payload);\n    },\n    addWord: (state, action: PayloadAction<string>) => {\n      state.predictions = [];\n      state.words.push(action.payload);\n    },\n    logWords: (state) => {\n      state.log.unshift(state.words);\n      state.words = [];\n    },\n  },\n})\n\n\nexport default settingsSlice.reducer\nexport const store = configureStore({\n  reducer: { settings: settingsSlice.reducer, sentence: sentenceSlice.reducer },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport const getState = store.getState;\nexport const dispatch = store.dispatch;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slider from '@material-ui/core/Slider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState, AppDispatch, settingsSlice } from './store';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nfunction valuetext(value: number) {\n    return `${value}%`;\n}\n\nexport default function SettingsDialog(props: { open: boolean, handleClose: () => void }) {\n    const { open, handleClose } = props;\n    const settings = useSelector((state: RootState) => state.settings)\n    const dispatch: AppDispatch = useDispatch()\n\n    return (\n        <div>\n            <Dialog\n                fullWidth={true}\n                maxWidth=\"sm\"\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"settings-dialog-title\"\n            >\n                <DialogTitle id=\"settings-dialog-title\">\n                    Settings\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <FormGroup>\n                            <FormControlLabel \n                                control={\n                                    <Slider\n                                        value={settings.threshold}\n                                        getAriaValueText={valuetext}\n                                        aria-labelledby=\"threshold-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        step={5}\n                                        marks\n                                        min={50}\n                                        max={99}\n                                        onChange={(event, value) => dispatch(settingsSlice.actions.setThreshold(value as number))}\n                                    />\n                                }\n                                label=\"Accuracy threshold\"\n                                labelPlacement=\"top\"\n                            />\n\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={settings.showStats}\n                                        onChange={event => dispatch(settingsSlice.actions.setShowStats(event.target.checked))}\n                                        name=\"showStats\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Show Stats\"\n                            />\n\n                            {/* <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={settings.speakAlong}\n                                        onChange={event => dispatch(settingsSlice.actions.setSpeakAlong(event.target.checked))}\n                                        name=\"showStats\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Speak along signing\"\n                            /> */}\n                        </FormGroup>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import { Camera } from \"@mediapipe/camera_utils\";\nimport { Hands, NormalizedLandmarkList, Results } from \"@mediapipe/hands\";\nimport * as tf from '@tensorflow/tfjs'\nimport { dispatch, getState, sentenceSlice } from \"./store\";\n\nvar model: tf.LayersModel;\n\nvar actions: string[] = [];\nvar franco: {[key:string]: string};\n\nvar keypoints = [];\nvar sequence: number[][] = [];\n\nvar predictions: string[] = [];\nvar words: string[] = [];\n\nconst zeros = new Array(63).fill(0);\nexport const extractKeypoints = (landmarks: NormalizedLandmarkList) => {\n  return landmarks.reduce(\n    function (accumulator, currentValue) {\n      return accumulator.concat([currentValue.x, currentValue.y, currentValue.z])\n    },\n    [] as number[]\n  )\n}\nexport function mode(arr: any[]) {\n  return arr.sort((a, b) =>\n    arr.filter(v => v === a).length\n    - arr.filter(v => v === b).length\n  ).pop();\n}\n\nfunction extractSequence(results: Results) {\n\n  if (results.multiHandLandmarks && results.multiHandedness) {\n    var lh = zeros;\n    var rh = zeros;\n\n    for (let index = 0; index < results.multiHandLandmarks.length; index++) {\n      const classification = results.multiHandedness[index];\n      const isRightHand = classification.label === 'Right';\n      const landmarks = results.multiHandLandmarks[index];\n\n      if (isRightHand) {\n        rh = extractKeypoints(landmarks)\n      }\n      else {\n        lh = extractKeypoints(landmarks)\n      }\n    }\n\n    keypoints = [...lh, ...rh]\n    sequence.push(keypoints)\n  }\n\n}\n\nexport async function loadModel() {\n  const modelURL = 'model/model.json';\n  model = await tf.loadLayersModel(modelURL);\n}\n\nexport async function loadActions() {\n  const response = await fetch(\"/model.csv\");\n  const data = await response.text();\n  actions = data.split(\",\");\n  await loadFranco();\n}\n\nasync function loadFranco() {\n  const response = await fetch(\"/franco.json\");\n  franco = await response.json();\n}\n\nexport async function loadVideoFeed(el: HTMLVideoElement) {\n  const hands = new Hands({\n    locateFile: (file) => {\n      return `/hands/${file}`;\n    }\n  });\n  hands.setOptions({\n    maxNumHands: 2,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  hands.onResults(onResults);\n  await hands.initialize()\n  if (el) {\n    new Camera(el, {\n      onFrame: async () => {\n        await hands.send({ image: el });\n      },\n    }).start()\n  }\n\n}\nconst makePrediction = (sequence: number[][]) => {\n  let tensor: tf.Tensor3D = tf.tensor([sequence]);\n  let outputTensor = model.predict(tensor)\n  let res = (outputTensor as tf.Tensor3D).dataSync()\n  let max = Math.max(...res)\n  let argmax = [...res].indexOf(max);\n\n  const threshold = getState().settings.threshold / 100\n  if (max >= threshold) {\n    console.log(actions[argmax], max);\n    return actions[argmax]\n  }\n  return null;\n\n}\n\nfunction onResults(results: Results) {\n  extractSequence(results)\n  if (sequence.length === 2) {\n    const prediction = makePrediction(sequence);\n    const isNew = prediction !== words[words.length - 1];\n    const isStable = predictions.length > 4 && prediction === mode(predictions);\n\n    if (prediction) {\n      predictions.push(prediction);\n      dispatch(sentenceSlice.actions.addPrediction(prediction))\n    }\n\n    if (prediction && isNew && isStable) {\n      words.push(prediction);\n      predictions = [];\n      dispatch(sentenceSlice.actions.addWord(prediction));\n      // const speakAlong = getState().settings.speakAlong;\n      // if (speakAlong) \n      speechSynthesis.speak(new SpeechSynthesisUtterance(franco[prediction]));\n    }\n    sequence = []\n  }\n\n}\n\nexport function logWords() {\n  // const sentenceWords = getState().sentence.words;\n  // const francoWords = sentenceWords.map(word => franco[word])\n  // speechSynthesis.speak(new SpeechSynthesisUtterance(francoWords.join(\" \")));\n  dispatch(sentenceSlice.actions.logWords());\n  words = []\n}\n\nexport function getCounts(arr: string[]) {\n  let countedWords = arr.reduce(function (counts, word) {\n    if (word in counts) {\n      counts[word]++\n    }\n    else {\n      counts[word] = 1\n    }\n    return counts\n  }, {} as { [key: string]: number })\n  return countedWords;\n}\n\n","import React, { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux'\nimport './App.css';\nimport Webcam from 'react-webcam';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SettingsDialog from './Settings';\nimport { RootState } from './store';\nimport { getCounts, loadActions, loadModel, loadVideoFeed, logWords } from './util';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport RecordVoiceOverIcon from '@material-ui/icons/RecordVoiceOver';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createTheme } from '@material-ui/core/styles';\nimport TypeWriter from 'react-typewriter';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#ffce42',\n      main: '#ffbd00',\n      dark: '#bd8c00',\n      contrastText: '#fff',\n    },\n  },\n});\n\nfunction App() {\n  const webcamRef: React.Ref<Webcam> = useRef(null);\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const settings = useSelector((state: RootState) => state.settings)\n  const sentence = useSelector((state: RootState) => state.sentence)\n\n  const handleClickOpenSettings = () => {\n    setSettingsOpen(true);\n  };\n\n  const handleCloseSettings = () => {\n    setSettingsOpen(false);\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      await loadActions()\n      await loadModel();\n      if (webcamRef.current?.video) await loadVideoFeed(webcamRef.current?.video)\n      setLoading(false)\n    }\n    init()\n  }, []);\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppBar position=\"fixed\">\n        <Toolbar className=\"appbar-toolbar\">\n          <div className=\"appbar-toolbar--title\">\n            <img src=\"/favicon.ico\" alt=\"logo\"></img>\n            <Typography variant=\"h6\">IHearU</Typography>\n          </div>\n          <IconButton edge=\"end\" aria-label=\"settings\" aria-haspopup=\"true\" color=\"inherit\" onClick={handleClickOpenSettings}>\n            <SettingsIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <div className=\"App-body\">\n        {(!loading && settings.showStats) && <div className=\"stats\">\n          {/* <div>Threshold: {settings.threshold}%</div> */}\n          <div>\n            {Object.keys(getCounts(sentence.predictions)).map(word =>\n              <span key={word}>{word}: {getCounts(sentence.predictions)[word]} </span>)}\n          </div>\n        </div>}\n        <Webcam\n          ref={webcamRef}\n          style={{\n            display: loading ? \"none\" : \"block\"\n          }}\n        />\n        <SettingsDialog open={settingsOpen} handleClose={handleCloseSettings} />\n        {loading && <div className=\"loading-scrim\">\n          <img src=\"/logo192.png\" alt=\"IHearU Logo\" className=\"App-logo\"></img>\n          <h3>Loading detection models</h3>\n          <CircularProgress /></div>\n        }\n        {!loading && <div className=\"word-container\">\n          <div className=\"typewriter-container\">\n            <TypeWriter typing={1}>{sentence.words.join(\" \")}</TypeWriter>\n            <IconButton edge=\"end\" aria-label=\"settings\" aria-haspopup=\"true\" color=\"primary\" onClick={logWords} disabled={sentence.words.length === 0}>\n              <RecordVoiceOverIcon />\n            </IconButton>\n          </div>\n\n          <div className=\"word-log\">\n            {sentence.log.map((sentence, i) =>\n              <p key={`${sentence}-${i}`}>{sentence.join(\" \")} </p>\n            )}\n          </div>\n        </div>}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport { store } from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}